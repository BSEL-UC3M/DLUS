Starting... 
2021-11-28 13:11:27.963617: Using splits from existing split file: /home/lgelcano/data_PerPlanRT/Segmentation/nnUNet/preprocessed/Task113_IGRTProstateVOI_Add/splits_final.pkl 
2021-11-28 13:11:27.964719: The split file contains 5 splits. 
2021-11-28 13:11:27.964823: Desired fold for training: 4 
2021-11-28 13:11:27.964909: This split has 238 training and 59 validation cases. 
2021-11-28 13:11:28.041402: TRAINING KEYS:
 odict_keys(['IGRT_0003', 'IGRT_0005', 'IGRT_0006', 'IGRT_0007', 'IGRT_0008', 'IGRT_0010', 'IGRT_0011', 'IGRT_0012', 'IGRT_0013', 'IGRT_0014', 'IGRT_0015', 'IGRT_0017', 'IGRT_0018', 'IGRT_0019', 'IGRT_0020', 'IGRT_0021', 'IGRT_0022', 'IGRT_0023', 'IGRT_0024', 'IGRT_0025', 'IGRT_0033', 'IGRT_0034', 'IGRT_0035', 'IGRT_0036', 'IGRT_0038', 'IGRT_0042', 'IGRT_0043', 'IGRT_0044', 'IGRT_0045', 'IGRT_0047', 'IGRT_0049', 'IGRT_0051', 'IGRT_0052', 'IGRT_0055', 'IGRT_0058', 'IGRT_0059', 'IGRT_0061', 'IGRT_0062', 'IGRT_0063', 'IGRT_0065', 'IGRT_0067', 'IGRT_0068', 'IGRT_0069', 'IGRT_0072', 'IGRT_0073', 'IGRT_0074', 'IGRT_0076', 'IGRT_0077', 'IGRT_0080', 'IGRT_0081', 'IGRT_0084', 'IGRT_0087', 'IGRT_0089', 'IGRT_0090', 'IGRT_0091', 'IGRT_0092', 'IGRT_0093', 'IGRT_0094', 'IGRT_0096', 'IGRT_0098', 'IGRT_0102', 'IGRT_0103', 'IGRT_0108', 'IGRT_0109', 'IGRT_0111', 'IGRT_0112', 'IGRT_0114', 'IGRT_0115', 'IGRT_0119', 'IGRT_0120', 'IGRT_0122', 'IGRT_0123', 'IGRT_0124', 'IGRT_0125', 'IGRT_0126', 'IGRT_0127', 'IGRT_0128', 'IGRT_0129', 'IGRT_0130', 'IGRT_0131', 'IGRT_0132', 'IGRT_0134', 'IGRT_0140', 'IGRT_0141', 'IGRT_0142', 'IGRT_0143', 'IGRT_0144', 'IGRT_0145', 'IGRT_0146', 'IGRT_0147', 'IGRT_0148', 'IGRT_0151', 'IGRT_0152', 'IGRT_0153', 'IGRT_0154', 'IGRT_0157', 'IGRT_0158', 'IGRT_0159', 'IGRT_0160', 'IGRT_0162', 'IGRT_0168', 'IGRT_0170', 'IGRT_0174', 'IGRT_0175', 'IGRT_0177', 'IGRT_0178', 'IGRT_11004', 'IGRT_11005', 'IGRT_11010', 'IGRT_11019', 'IGRT_11039', 'IGRT_11049', 'IGRT_11052', 'IGRT_11053', 'IGRT_11054', 'IGRT_11056', 'IGRT_11057', 'IGRT_11058', 'IGRT_11062', 'IGRT_11065', 'IGRT_11066', 'IGRT_11070', 'IGRT_11071', 'IGRT_11073', 'IGRT_11215', 'IGRT_11217', 'IGRT_11231', 'IGRT_11241', 'IGRT_11243', 'IGRT_11246', 'IGRT_11247', 'IGRT_11248', 'IGRT_11250', 'IGRT_11252', 'IGRT_11254', 'IGRT_11255', 'IGRT_11256', 'IGRT_11259', 'IGRT_11260', 'IGRT_11261', 'IGRT_11265', 'IGRT_11267', 'IGRT_11268', 'IGRT_11269', 'IGRT_11270', 'IGRT_11271', 'IGRT_11276', 'IGRT_11277', 'IGRT_11278', 'IGRT_11282', 'IGRT_11284', 'IGRT_11285', 'IGRT_11286', 'IGRT_11287', 'IGRT_11289', 'IGRT_11290', 'IGRT_11292', 'IGRT_11294', 'IGRT_11296', 'IGRT_11298', 'IGRT_21002', 'IGRT_21004', 'IGRT_21005', 'IGRT_21007', 'IGRT_21011', 'IGRT_21012', 'IGRT_21019', 'IGRT_21025', 'IGRT_21028', 'IGRT_21029', 'IGRT_21031', 'IGRT_21033', 'IGRT_21035', 'IGRT_21038', 'IGRT_21039', 'IGRT_21040', 'IGRT_21041', 'IGRT_21043', 'IGRT_21044', 'IGRT_21047', 'IGRT_21050', 'IGRT_21053', 'IGRT_21054', 'IGRT_21055', 'IGRT_21056', 'IGRT_21060', 'IGRT_21067', 'IGRT_21068', 'IGRT_21071', 'IGRT_21076', 'IGRT_21079', 'IGRT_21081', 'IGRT_21084', 'IGRT_21085', 'IGRT_21088', 'IGRT_21089', 'IGRT_21094', 'IGRT_21095', 'IGRT_21097', 'IGRT_21100', 'IGRT_21101', 'IGRT_21102', 'IGRT_21109', 'IGRT_21114', 'IGRT_21117', 'IGRT_21119', 'IGRT_21122', 'IGRT_21123', 'IGRT_21124', 'IGRT_21126', 'IGRT_21135', 'IGRT_21138', 'IGRT_21139', 'IGRT_21145', 'IGRT_21146', 'IGRT_21147', 'IGRT_21149', 'IGRT_21150', 'IGRT_21151', 'IGRT_22002', 'IGRT_22003', 'IGRT_22004', 'IGRT_22006', 'IGRT_22009', 'IGRT_22010', 'IGRT_22013', 'IGRT_22015', 'IGRT_22016', 'IGRT_22017', 'IGRT_22020', 'IGRT_22024', 'IGRT_22025', 'IGRT_22027', 'IGRT_22028', 'IGRT_22031', 'IGRT_22033', 'IGRT_22084', 'IGRT_22087']) 
2021-11-28 13:11:28.041514: VALIDATION KEYS:
 odict_keys(['IGRT_0009', 'IGRT_0016', 'IGRT_0026', 'IGRT_0027', 'IGRT_0040', 'IGRT_0046', 'IGRT_0048', 'IGRT_0050', 'IGRT_0054', 'IGRT_0057', 'IGRT_0060', 'IGRT_0078', 'IGRT_0082', 'IGRT_0085', 'IGRT_0095', 'IGRT_0097', 'IGRT_0099', 'IGRT_0100', 'IGRT_0104', 'IGRT_0105', 'IGRT_0106', 'IGRT_0107', 'IGRT_0113', 'IGRT_0118', 'IGRT_0133', 'IGRT_0135', 'IGRT_0139', 'IGRT_0149', 'IGRT_0150', 'IGRT_0155', 'IGRT_0161', 'IGRT_0173', 'IGRT_0180', 'IGRT_11011', 'IGRT_11018', 'IGRT_11042', 'IGRT_11063', 'IGRT_11244', 'IGRT_11264', 'IGRT_11274', 'IGRT_11279', 'IGRT_21001', 'IGRT_21014', 'IGRT_21021', 'IGRT_21048', 'IGRT_21051', 'IGRT_21058', 'IGRT_21069', 'IGRT_21098', 'IGRT_21103', 'IGRT_21106', 'IGRT_21121', 'IGRT_21128', 'IGRT_21129', 'IGRT_21144', 'IGRT_22021', 'IGRT_22034', 'IGRT_22075', 'IGRT_22083']) 
2021-11-28 13:11:31.265464: lr: 0.01 
2021-11-28 13:11:49.167683: Unable to plot network architecture: 
2021-11-28 13:11:49.167850: No module named 'graphviz' 
2021-11-28 13:11:49.167902: 
printing the network instead:
 
2021-11-28 13:11:49.167948: Generic_UNet(
  (conv_blocks_localization): ModuleList(
    (0): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(640, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (1): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(512, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (2): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (3): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
    (4): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (conv_blocks_context): ModuleList(
    (0): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (1): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (2): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (3): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (4): StackedConvLayers(
      (blocks): Sequential(
        (0): ConvDropoutNormNonlin(
          (conv): Conv3d(256, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
        (1): ConvDropoutNormNonlin(
          (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
      (1): StackedConvLayers(
        (blocks): Sequential(
          (0): ConvDropoutNormNonlin(
            (conv): Conv3d(320, 320, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (instnorm): InstanceNorm3d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
          )
        )
      )
    )
  )
  (td): ModuleList()
  (tu): ModuleList(
    (0): ConvTranspose3d(320, 320, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (1): ConvTranspose3d(320, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (2): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (3): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    (4): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
  )
  (seg_outputs): ModuleList(
    (0): Conv3d(320, 5, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (1): Conv3d(256, 5, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (2): Conv3d(128, 5, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (3): Conv3d(64, 5, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    (4): Conv3d(32, 5, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  )
) 
2021-11-28 13:11:49.170572: 
 
2021-11-28 13:11:49.254555: 
epoch:  0 
2021-11-28 13:17:52.257819: train loss : 0.4202 
2021-11-28 13:18:10.596971: validation loss: 0.1541 
2021-11-28 13:18:10.597397: Average global foreground Dice: [0.0162, 0.5268, 0.0011, 0.0] 
2021-11-28 13:18:10.597465: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:18:11.142832: lr: 0.009982 
2021-11-28 13:18:11.142945: This epoch took 381.888232 s
 
2021-11-28 13:18:11.142985: 
epoch:  1 
2021-11-28 13:23:58.565588: train loss : 0.0467 
2021-11-28 13:24:16.950096: validation loss: -0.0385 
2021-11-28 13:24:16.950515: Average global foreground Dice: [0.1542, 0.7008, 0.0192, 0.0121] 
2021-11-28 13:24:16.950572: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:24:17.550297: lr: 0.009964 
2021-11-28 13:24:17.589307: saving checkpoint... 
2021-11-28 13:24:17.833174: done, saving took 0.28 seconds 
2021-11-28 13:24:17.849133: This epoch took 366.706104 s
 
2021-11-28 13:24:17.849274: 
epoch:  2 
2021-11-28 13:30:05.335644: train loss : -0.0998 
2021-11-28 13:30:23.736746: validation loss: -0.1930 
2021-11-28 13:30:23.737227: Average global foreground Dice: [0.378, 0.8316, 0.0389, 0.0] 
2021-11-28 13:30:23.739850: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:30:24.348433: lr: 0.009946 
2021-11-28 13:30:24.387630: saving checkpoint... 
2021-11-28 13:30:24.694902: done, saving took 0.35 seconds 
2021-11-28 13:30:24.706479: This epoch took 366.857146 s
 
2021-11-28 13:30:24.706569: 
epoch:  3 
2021-11-28 13:36:12.168731: train loss : -0.2062 
2021-11-28 13:36:30.560916: validation loss: -0.3168 
2021-11-28 13:36:30.561343: Average global foreground Dice: [0.5985, 0.8385, 0.7036, 0.0] 
2021-11-28 13:36:30.561398: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:36:31.176331: lr: 0.009928 
2021-11-28 13:36:31.218116: saving checkpoint... 
2021-11-28 13:36:31.474985: done, saving took 0.30 seconds 
2021-11-28 13:36:31.488166: This epoch took 366.781554 s
 
2021-11-28 13:36:31.488346: 
epoch:  4 
2021-11-28 13:42:19.013859: train loss : -0.3074 
2021-11-28 13:42:37.406528: validation loss: -0.3768 
2021-11-28 13:42:37.406950: Average global foreground Dice: [0.6931, 0.8595, 0.6816, 0.0001] 
2021-11-28 13:42:37.407007: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:42:38.019169: lr: 0.00991 
2021-11-28 13:42:38.061576: saving checkpoint... 
2021-11-28 13:42:38.320022: done, saving took 0.30 seconds 
2021-11-28 13:42:38.331839: This epoch took 366.843351 s
 
2021-11-28 13:42:38.331942: 
epoch:  5 
2021-11-28 13:48:25.835403: train loss : -0.3583 
2021-11-28 13:48:44.210562: validation loss: -0.4434 
2021-11-28 13:48:44.210948: Average global foreground Dice: [0.7172, 0.8955, 0.7283, 0.2801] 
2021-11-28 13:48:44.211001: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:48:44.811517: lr: 0.009892 
2021-11-28 13:48:44.848275: saving checkpoint... 
2021-11-28 13:48:45.101258: done, saving took 0.29 seconds 
2021-11-28 13:48:45.110345: This epoch took 366.778358 s
 
2021-11-28 13:48:45.110452: 
epoch:  6 
2021-11-28 13:54:32.072635: train loss : -0.4200 
2021-11-28 13:54:50.462482: validation loss: -0.4742 
2021-11-28 13:54:50.462895: Average global foreground Dice: [0.7084, 0.8984, 0.7416, 0.3649] 
2021-11-28 13:54:50.462966: (interpret this as an estimate for the Dice of the different classes. This is not exact.) 
2021-11-28 13:54:51.068514: lr: 0.009874 
2021-11-28 13:54:51.100344: saving checkpoint... 
2021-11-28 13:54:51.352898: done, saving took 0.28 seconds 
2021-11-28 13:54:51.366537: This epoch took 366.256040 s
 
2021-11-28 13:54:51.366643: 
epoch:  7 
